import React, { useState, useMemo } from 'react';

const allSuggestions = [
    "Um le√£o majestoso com uma coroa de estrelas, fotorrealista, ilumina√ß√£o cinematogr√°fica",
    "Uma floresta encantada √† noite, com cogumelos brilhantes e criaturas m√≠sticas, arte de fantasia",
    "Uma cidade retro-futurista com carros voadores e letreiros de n√©on, estilo cyberpunk",
    "Uma pintura em aquarela de um caf√© tranquilo em um dia chuvoso em Paris",
    "Um panda vermelho fofo usando um pequeno chap√©u de mago, ilustra√ß√£o digital",
    "Uma paisagem surreal onde as nuvens s√£o feitas de algod√£o doce e os rios correm com chocolate",
    "Um logotipo vetorial detalhado de um lobo uivando para a lua, design minimalista",
    "Uma coruja mec√¢nica inspirada no steampunk com olhos de √¢mbar brilhantes",
    "Uma renderiza√ß√£o 3D de um cheeseburger de apar√™ncia deliciosa, fotografia de comida, alto detalhe",
    "Um astronauta flutuando pacificamente no espa√ßo, olhando para a Terra, com a Via L√°ctea ao fundo, hiper-realista",
    "Uma ilustra√ß√£o estilo chibi de um abacate sorridente",
    "Uma vis√£o isom√©trica de um est√∫dio de artista aconchegante e bagun√ßado",
    "Um vitral representando uma supernova c√≥smica",
    "Um p√¥r do sol estilo synthwave sobre um oceano digital",
];

const shuffleArray = <T,>(array: T[]): T[] => {
    const newArray = [...array];
    for (let i = newArray.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
    }
    return newArray;
};


interface PromptSuggestionsProps {
    onSelectPrompt: (prompt: string) => void;
}

export const PromptSuggestions: React.FC<PromptSuggestionsProps> = ({ onSelectPrompt }) => {
    const [shuffledPrompts, setShuffledPrompts] = useState(() => shuffleArray(allSuggestions));

    const displayedPrompts = useMemo(() => shuffledPrompts.slice(0, 3), [shuffledPrompts]);

    const handleShuffle = () => {
        setShuffledPrompts(shuffleArray(allSuggestions));
    };

    return (
        <div className="mt-2 text-sm">
            <div className="flex justify-between items-center mb-2">
                <span className="text-gray-400 font-semibold">üí° Sugest√µes:</span>
                <button
                    onClick={handleShuffle}
                    className="text-purple-400 hover:text-purple-300 text-xs font-semibold p-1 rounded-md hover:bg-gray-700/50 transition-colors flex items-center gap-1"
                    title="Novas sugest√µes"
                >
                    üé≤ Novas
                </button>
            </div>
            <div className="flex flex-col gap-2">
                {displayedPrompts.map((prompt, index) => (
                    <button
                        key={index}
                        onClick={() => onSelectPrompt(prompt)}
                        className="text-left p-2 bg-[#2a2a2a] rounded-md hover:bg-gray-700 transition-colors text-gray-300 text-xs"
                    >
                        {prompt}
                    </button>
                ))}
            </div>
        </div>
    );
};